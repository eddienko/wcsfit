Help on module wcsfit:

NAME
    wcsfit - Implement astrometric fit to Euclid OU-VIS Images.

FILE
    /data/wcsfit.py

DESCRIPTION
    HOWTO
    -----
    
    1. Create a MEF file with one CCD per extension from the result of a simulation 
       which contains 144 quadrants.
    
       import wcsfit
       wcsfit.merge_quadrants('image.fit')
    
    2. Initialize headers and WCS
    
       img = wcsfit.CCDImage('image_ccd.fits')
       img.init_astrometry()
    
    3. Optionally add a precomputed model of the astrometric distortion
    
       img.add_astrometric_distortion()
    
       In case of a high dense stellar field which will be used as calibration
       this step is not needed. For other fields with less stars, or when we do
       not want to fit the model but use the precomputed one, this step is
       required.
    
    4. Extract objects from the image.
    
       img.run_imcore()
    
    5. Perform the astrometric fit.
    
     5a. For a dense field and to update the astrometric model
    
       img.run_wcsfit(fitpv=True)
    
     5b. In any other case (i.e. normal operations)
    
       img.run_wcsfit()
    
    Author(s)
    ---------
    
    2016 Eduardo Gonzalez-Solares
    
    Changelog
    ---------
    
    201611 (TODO)
    
     - Better handling of cases with no stars or not enough stars
     - When fitting affine transformation provide estimation on success before updating a solution
     - When fitting PV provide estimation on success before updating a solution
     
    
    201610
    
     - Added check of astrometry RMS in order to end iteration.
     - Removed need for wcsfit from casutools. Dependency on imcore still present.
       Probably needs some bug squishing for cases with no stars in detector, etc.
     - Reworked most of the run_wcsfit function.
     - Allow to fit full astrometric model for dense fields removing the need of
       using SCAMP.
     - Added CCDImage class to drive the fitting
     - Dropped support for running in quadrants only (could be added at later stage).
     - Dropped multithreading support (could be added at later stage)

CLASSES
    __builtin__.object
        CCDImage
    
    class CCDImage(__builtin__.object)
     |  Class to deal with astrometry of Euclid CCD images.
     |  
     |  Methods defined here:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, type, value, traceback)
     |  
     |  __init__(self, image_name)
     |      Initialize the class. Note that errors are not fully handled, i.e., it is
     |      user responsability to feed a valid FITS file.
     |  
     |  add_astrometric_distortion(self, config='wcsfit.conf')
     |      Add astrometric distortion model to the header. This function reads the 
     |      astrometric model (i.e. PV keywords) from a configuration file and updates
     |      the header accordingly.
     |  
     |  fill_coords(self)
     |      Calculates RA and DEC coordinates from X and Y and stores in catalogue.
     |      This step is necessary if the RA, DEC coordinates are needed after a run
     |      of imcore.
     |      
     |      Currently this is a convenience function if one needs to work with the
     |      catalogue generated by imcore elsewhere. It is not used in the fitting
     |      procedure.
     |  
     |  fit_astrometry(self, reference_catalogue, imcore=True, mode='pipeline', fitpv=False)
     |      Covenience function to run all commands to fit the astrometry to an image.
     |      
     |      Arguments
     |      ---------
     |      
     |      reference_catalogue: name of the catalogue containing reference stars
     |      imcore: if True create a catalogue
     |      mode: either pipeline or calibration
     |  
     |  init_astrometry(self, centre='ccd', more_keys=False)
     |      Initialise the astrometric keywords in the headers and optionally allocate space for more keywords.
     |      This function only moves the reference point to the centre of each CCD. See function
     |      add_astrometric_distortion to add the astrometric model.
     |      
     |      Arguments
     |      ---------
     |      
     |      centre: location of the reference point. Either in the centre of each CCD or in the centre of the FPA.
     |  
     |  run_imcore(self, confmap='noconf', cattype=6)
     |      Extract objects from image using imcore.
     |      
     |      TODO: Possibly replace this by some other method (?). Need to take
     |      into account PSF shape for centroiding.
     |      
     |      Arguments
     |      ---------
     |      
     |      confmap: name of confidence map, either 'noconf' to not use a map,
     |               'auto' to look for one called image_conf.fit or name.
     |      
     |      cattype: type of catalogue to generate. Just leave the default.
     |  
     |  run_wcsfit(self, refcat, niter=12, fitpv=False, maxstars=None)
     |      Fit astrometry model.
     |      
     |      Arguments
     |      ---------
     |      
     |      refcat: reference astrometric catalogue
     |      
     |      niter: number of iterations to perform
     |      
     |      fitpv: if True refine the astrometric model.
     |      
     |      maxstars: maximum number of reference stars used for the match (TODO)
     |  
     |  update_model(self, config='wcsfit.conf')
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    check_exe_in_path()
        Check that imcore executable is available. It must be given 
        either in the IMCORE environment variable or present in PATH.
    
    get_number_of_extensions(input)
        Return number of extensions in a FITS file
    
    merge_quadrants(input, append='_ccd')
        Given an input image containing quadrants (image.fit), produce
        an image containing CCDs (image_ccd.fit)
    
    print_summary(input)
        Print a summary of results from astrometric fit.
    
    weight_to_conf(input, confmap)
        Convert weight map to 100 median and integer as required by IMCORE.

DATA
    ERROR = 1
    IMCORE = '/soft/imcore'
    OK = 0
    STATUS = 0
    __version__ = 201610
    console = <logging.StreamHandler object>
    logger = <logging.Logger object>

VERSION
    201610


