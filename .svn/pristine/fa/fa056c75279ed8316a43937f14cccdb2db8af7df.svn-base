#!/usr/bin/python

"""
Implement astrometric fit to Euclid OU-VIS Images.

HOWTO
-----

1. Create a MEF file with one CCD per extension from the result of a simulation 
   which contains 144 quadrants.

   import wcsfit
   wcsfit.merge_quadrants('image.fit')

2. Initialize headers and WCS

   img = wcsfit.CCDImage('image_ccd.fits')
   img.init_astrometry()

3. Optionally add a precomputed model of the astrometric distortion

   img.add_astrometric_distortion()

   In case of a high dense stellar field which will be used as calibration
   this step is not needed. For other fields with less stars, or when we do
   not want to fit the model but use the precomputed one, this step is
   required.

4. Extract objects from the image.

   img.run_imcore()

5. Perform the astrometric fit.

 5a. For a dense field and to update the astrometric model

   img.run_wcsfit(fitpv=True)

 5b. In any other case (i.e. normal operations)

   img.run_wcsfit()

Author(s)
---------

2016 Eduardo Gonzalez-Solares

Changelog
---------

201611 (TODO)

 - Better handling of cases with no stars or not enough stars
 - When fitting affine transformation provide estimation on success before updating a solution
 - When fitting PV provide estimation on success before updating a solution
 - When iterating, check if iteration can finish or continue


201610

 - Removed need for wcsfit from casutools. Dependency on imcore still present.
   Probably needs some bug squishing for cases with no stars in detector, etc.
 - Reworked most of the run_wcsfit function.
 - Allow to fit full astrometric model for dense fields removing the need of
   using SCAMP.
 - Added CCDImage class to drive the fitting
 - Dropped support for running in quadrants only (could be added at later stage).
 - Dropped multithreading support (could be added at later stage)
 
"""

__version__ = 201610

# Module imports
import os
import sys
import subprocess
import shutil
import argparse
import logging
from datetime import datetime
from distutils import spawn
from configobj import ConfigObj

# Numeric Python and AstroPy
import numpy as np
from scipy import optimize

from astropy.io import fits
from astropy.wcs import WCS
from astropy.coordinates import SkyCoord
from astropy import units as u

# Define local status variables
OK = 0
ERROR =1
STATUS = OK

# Find 'imcore' and 'wcsfit' 
# It first checks whether IMCORE or WCSFIT enviroment variables have been set
# and defaults to whatever version is in path if not
IMCORE=os.getenv('IMCORE', spawn.find_executable('imcore'))

# Set logging
logger = logging.getLogger('wcsfit')
console = logging.StreamHandler()
console.setFormatter(logging.Formatter('%(name)s:%(levelname)s:%(message)s'))
logger.addHandler(console)
logger.setLevel(logging.INFO)

def check_exe_in_path():
    """
    Check that imcore executable is available. It must be given 
    either in the IMCORE environment variable or present in PATH.
    """
    logger.info('IMCORE: %s', IMCORE)
    if (IMCORE is None) or (not os.access(IMCORE, os.X_OK)):
        logger.error('imcore not found in path')
        return ERROR
        
def get_number_of_extensions(input):
    """
    Return number of extensions in a FITS file
    """
    fh = fits.open(input)
    n = len(fh) - 1
    fh.close()
    return n
    
def merge_quadrants(input):
    """
    Given an input image containing quadrants (image.fit), produce
    an image containing CCDs (image_ccd.fit)
    """
    
    logger.info('merging quadrants into CCD image (%s)' % input)
    
    output = input.replace('.fit','_ccd.fit')
    
    if os.access(output, os.F_OK):
        logger.info('output image already exists {}'.format(output))
        return
    
    fh = fits.open(input)
    hdulist=[fh[0]]

    logger.debug('input image has {} extensions'.format(len(fh)-1))

    for i in range(int((len(fh)-1)/4)):
            logger.debug('merging CCD #%d' % (i+1))
            ccd=fits.ImageHDU(data=np.zeros([4132,4096]).astype(np.float32), header=fh[i*4+1].header)
            ccd.data[0:2066,0:2048]=fh[4*i+1].data.astype(np.float32)
            ccd.data[0:2066,2048:4096]=fh[4*i+2].data.astype(np.float32)
            ccd.data[2066:4132,0:2048]=fh[4*i+3].data.astype(np.float32)
            ccd.data[2066:4132,2048:4096]=fh[4*i+4].data.astype(np.float32)
            hdulist+=[ccd]
        
    nfh=fits.HDUList(hdulist)
    
    logger.info('writing CCD image to disk (%s)' % output)
    
    nfh.writeto(output)
    
def weight_to_conf(input, confmap):
    """
    Convert weight map to 100 median and integer as required by IMCORE.
    """
    
    logger.info('making confidence map')
    
    output = input.replace('.fit','_conf.fit')
    fh = fits.open(confmap)
    hdulist=[fh[0]]

    for i in range(36):
        weight = fh[i+1].data * 100.0
        ccd=fits.ImageHDU(data=weight.astype(np.int16))
        hdulist+=[ccd]
        
    nfh=fits.HDUList(hdulist)
    
    logger.info('writing confidence image to disk (%s)' % output)
    
    nfh.writeto(output, clobber=True)
    
    return output
    
class CCDImage(object):
    """
    Class to deal with astrometry of Euclid CCD images.
    """
    def __init__(self, image_name):
        """
        Initialize the class. Note that errors are not fully handled, i.e., it is
        user responsability to feed a valid FITS file.
        """
        self.image_name = image_name
                
    def fit_astrometry(self, reference_catalogue, imcore=True, mode='pipeline'):
        """
        Covenience function to run all commands to fit the astrometry to an image.

        Arguments
        ---------

        reference_catalogue: name of the catalogue containing reference stars
        imcore: if True create a catalogue
        mode: either pipeline or calibration
        """
        self.init_astrometry()
        self.add_astrometric_distortion()
        if imcore: self.run_imcore(confmap='auto')
        if mode=='pipeline' or mode=='pipe':
            self.run_wcsfit(reference_catalogue)
        elif mode=='calibration' or mode=='calib':
            self.run_wcsfit(reference_catalogue, fitpv=True)
            self.update_model()

    def init_astrometry(self, centre='ccd', more_keys=False):
        """
        Initialise the astrometric keywords in the headers and optionally allocate space for more keywords.
        This function only moves the reference point to the centre of each CCD. See function
        add_astrometric_distortion to add the astrometric model.
        
        Arguments
        ---------
        
        centre: location of the reference point. Either in the centre of each CCD or in the centre of the FPA.
        """
    
        logger.info('writing initial astrometric solution ({})'.format(centre))
    
        fh = fits.open(self.image_name, mode='update')

        for i in range(len(fh)-1):
            w = WCS(fh[i+1].header)
            if centre == 'fpa':
                cenra, cendec = fh[0].header['RA'], fh[0].header['DEC']
                crval = np.array([cenra, cendec], np.float_)
                crpix = w.wcs_world2pix([crval],1)[0]
            elif centre == 'ccd':
                crpix = np.array([fh[i+1].header['NAXIS1']/2.0, fh[i+1].header['NAXIS2']/2.0], np.float_)
                crval = w.wcs_pix2world([crpix],1)[0]
            
            fh[i+1].header['CRVAL1']=crval[0]
            fh[i+1].header['CRVAL2']=crval[1]
            fh[i+1].header['CRPIX1']=crpix[0]
            fh[i+1].header['CRPIX2']=crpix[1]

            fh[i+1].header['CTYPE1']='RA---TPV'
            fh[i+1].header['CTYPE2']='DEC--TPV'

            # Initialize PV coefficients
            # Two loops so that they are ordered in the header
            for k in range(11):
                fh[i+1].header['PV1_{}'.format(k)] = 0.0
            for k in range(11):
                fh[i+1].header['PV2_{}'.format(k)] = 0.0

            fh[i+1].header['PV1_1'] = 1.0
            fh[i+1].header['PV2_1'] = 1.0
        
            # Delete PC keywords since we are using the CD notation
            if 'PC1_1' in fh[i+1].header: del fh[i+1].header['PC1_1']
            if 'PC2_2' in fh[i+1].header: del fh[i+1].header['PC2_2']
            if 'PC2_1' in fh[i+1].header: del fh[i+1].header['PC2_1']
            if 'PC1_2' in fh[i+1].header: del fh[i+1].header['PC1_2']
    
            # Allocate space in header
            if more_keys:
                for j in range(20):
                    fh[i+1].header.add_blank()
            
        fh.flush() 
        fh.close()

    def add_astrometric_distortion(self, config='wcsfit.conf'):
        """
        Add astrometric distortion model to the header. This function reads the 
        astrometric model (i.e. PV keywords) from a configuration file and updates
        the header accordingly.
        """
    
        logger.info('adding distortion coefficients')
    
        # Open image to update
        fh = fits.open(self.image_name, mode='update')

        # Open the file containing coefficients
        conf = ConfigObj(os.path.join(os.path.dirname(__file__), config))

        # Add coefficents for each extension
        for i in range(len(fh)-1):
            fh[i+1].header['CTYPE1'] = 'RA---TPV'
            fh[i+1].header['CTYPE2'] = 'DEC--TPV'
    
            fh[i+1].header['CUNIT1'] = 'deg'
            fh[i+1].header['CUNIT2'] = 'deg'

            pvs = conf['CCD{}'.format(fh[i+1].header['CCDID'].strip())]
            for k,v in pvs.items():
                fh[i+1].header[k] = float(v)
        
        fh.flush() 
        fh.close()
        
    def run_imcore(self, confmap='noconf', cattype=6):
        """
        Extract objects from image using imcore.

        TODO: Possibly replace this by some other method (?). Need to take
        into account PSF shape for centroiding.

        Arguments
        ---------

        confmap: name of confidence map, either 'noconf' to not use a map,
                 'auto' to look for one called image_conf.fit or name.

        cattype: type of catalogue to generate. Just leave the default.
        """
    
        logger.info('detecting objects on images')
    
        catalogue = self.image_name.replace('.fit', '_cat.fit')
        if confmap=='auto':
            confmap = self.image_name.replace('.fit', '_conf.fit')
            if not os.access(confmap, os.R_OK):
                confmap='noconf'
            
        command = [IMCORE, self.image_name, confmap, catalogue, '3', '1.5', '--noell', '--nocrowd', '--cattype=%s' % cattype]
        res = subprocess.call(command, stderr = subprocess.PIPE, stdout = subprocess.PIPE)
        # Clean up
        if not res: shutil.rmtree('catcache', True)
        return res
        
    def fill_coords(self):
        """
        Calculates RA and DEC coordinates from X and Y and stores in catalogue.
        This step is necessary if the RA, DEC coordinates are needed after a run
        of imcore.

        Currently this is a convenience function if one needs to work with the
        catalogue generated by imcore elsewhere. It is not used in the fitting
        procedure.
        """
    
        logger.info('filling RA & Dec coordinates')
    
        # Open image and catalogue
        img = fits.open(self.image_name)
        cat = fits.open(self.image_name.replace('.fit', '_cat.fit'), mode='update')
    
        # Use the header on the image to compute coordinates and update catalogue
        for i in range(len(img)-1):
            w=WCS(img[i+1].header)
            x=cat[i+1].data.field('x_coordinate')
            y=cat[i+1].data.field('y_coordinate')
            a,d = w.all_pix2world(x,y,1)
            cat[i+1].data['ra']=a
            cat[i+1].data['dec']=d
            cat.flush()
        
        cat.close()
        img.close()
        
    def _errfunc(self, p, x, y, xi, eta):
        """
        Function to be minimized during least squares fit to calculate the affine transformation
        between two sets of points.

        Arguments
        ---------

        p: 4 dim vector to be mimimized containing rotation, scale and translation
        x, y: image coordinates of objects detected in image
        xi, eta: standard coordinates of reference objects
        """
        r, s, tx, ty   = p
    
        delta_xi = xi - ( -r*x + s*y + tx )
        delta_eta = eta - (s*x + r*y + ty )
        res = np.concatenate((delta_xi, delta_eta))
    
        return res.flatten()
        
    def _tpv(self, pv, x, y, hdr, refra, refdec):
        """
        Function to be minimized when computing the full distortion model.
        """
        pv = pv.reshape(2,11)
        pv1 = pv[0]
        pv2 = pv[1]
        
        tmphdr = hdr.copy()
        for k in range(11):
            tmphdr['PV1_{}'.format(k)] = pv1[k]
            tmphdr['PV2_{}'.format(k)] = pv2[k]
        w=WCS(tmphdr)

        xip, etap = w.wcs_pix2world(x, y, 1)
        xip = xip - hdr['CRVAL1']
        etap = etap - hdr['CRVAL2']
        
        delta_xi = xip - (refra - hdr['CRVAL1'])
        delta_eta = etap - (refdec - hdr['CRVAL2'])
        res = np.concatenate((delta_xi*3600., delta_eta*3600.0))
        
        return res.flatten()
        
        
    def _xmatch(self, ra, dec, refra, refdec):
        """
        Compute cross match between two sets of coordinates.
        """
        c = SkyCoord(ra=ra*u.degree, dec=dec*u.degree)
        refc = SkyCoord(ra=refra*u.degree, dec=refdec*u.degree)
        idx, d2d, d3d = c.match_to_catalog_sky(refc)
        return idx, d2d.arcsec
        
    def _platesol(self, A, B):
        """
        Least square solution of affine transformation.
        """

        # Allow arrays of different length but
        # ignore the extra points.
        N = min(len(A), len(B))

        a1 = b1 = c1 = d1 = 0.0
        a2 = b2 = 0.0
        ad = bc = ac = bd = 0.0
        for i in range(N):
            a = A[i][0]
            b = A[i][1]
            c = B[i][0]
            d = B[i][1]
            a1 += a
            b1 += b
            c1 += c
            d1 += d
            a2 += a * a
            b2 += b * b
            ad += a * d
            bc += b * c
            ac += a * c
            bd += b * d

        # Denominator.
        # It is zero iff X[i] = X[j] for every i and j in [0, n).
        # In other words, iff all the domain points are the same.
        den = N * a2 + N * b2 - a1 * a1 - b1 * b1

        if abs(den) < 1e-8:
            # The domain points are the same.
            # We assume the translation to the mean of the range
            # to be the best guess. However if N=0, assume identity.
            if N == 0:
                return [1.0, 0.0, 0.0, 0.0]
            else:
                return [1.0, 0.0, (c1 / N) - a, (d1 / N) - b]

        # Estimators
        s = (N * (ac + bd) - a1 * c1 - b1 * d1) / den
        r = (N * (ad - bc) + b1 * c1 - a1 * d1) / den
        tx = (-a1 * (ac + bd) + b1 * (ad - bc) + a2 * c1 + b2 * c1) / den
        ty = (-b1 * (ac + bd) - a1 * (ad - bc) + a2 * d1 + b2 * d1) / den

        return [s, r, tx, ty]
        
    def run_wcsfit(self, refcat, niter=3, fitpv=False):
        """
        Fit astrometry model.

        Arguments
        ---------

        refcat: reference astrometric catalogue

        niter: number of iterations to perform

        fitpv: if True refine the astrometric model.
        """
        logger.info('fitting astrometry')

        # Open image, catalogue and reference catalogue
        img = fits.open(self.image_name, mode='update')
        cat = fits.open(self.image_name.replace('.fit', '_cat.fit'))
        refcat = fits.open(refcat)
    
        # Read reference positions
        # TODO: We will want to do some filtering here
        refra = refcat[1].data.field('ra')
        refdec = refcat[1].data.field('dec')

        for i in range(1, len(img)):
            # Read position of objects detected in image
            # TODO: We will want to do some filtering here
            xcat = cat[i].data.field('x_coordinate')
            ycat = cat[i].data.field('y_coordinate')

            # Match to remove offset and update CRVAL
            hdr = img[i].header
            w = WCS(hdr)
            ra, dec = w.wcs_pix2world(xcat,ycat,1)
            idx, d2d = self._xmatch(ra, dec, refra, refdec)
            rad = np.median(d2d)+3*np.std(d2d)
            mask = d2d<rad
            # TODO: what to do if no matches?
            if sum(mask)<3: 
                continue
            offset_ra =  np.mean((ra-refra[idx])[mask])
            offset_dec = np.mean((dec-refdec[idx])[mask])
            hdr['CRVAL1'] -= offset_ra
            hdr['CRVAL2'] -= offset_dec

            # Start the iteration loop
            for j in range(niter):
                # First compute affine transformation fitting only
                # rotation, scale (shear) and translation
                w=WCS(hdr)
                # ... ra,dec of detected objects using the current WCS
                ra, dec = w.wcs_pix2world(xcat,ycat,1)
                # ... x,y of reference objects using current WCS
                refx,refy = w.wcs_world2pix(refra,refdec,1)
                # ... standard coordinates of reference stars using current WCS
                refxi = hdr['CD1_1']*(refx - hdr['CRPIX1']) + hdr['CD1_2']*(refy - hdr['CRPIX2'])  
                refeta = hdr['CD2_1']*(refx - hdr['CRPIX1']) + hdr['CD2_2']*(refy - hdr['CRPIX2'])

                # ... match and select only close matches
                idx, d2d = self._xmatch(ra, dec, refra, refdec)
                rad = np.median(d2d)+3*np.std(d2d)
                mask = d2d<rad

                # ... perform the optimization
                if 1==2:
                    # Using 'analytic' solution to the least square problem
                    inc = np.array(zip(xcat , ycat ))
                    outc = np.array(zip(-refxi[idx], refeta[idx]))

                    trans = self._platesol(inc[mask], outc[mask])
                    r, s, tx, ty = trans
                else:
                    # Using scipy and not worrying about all those matrix manipulations
                    # Benefit is that in the future we can define here our own minimizing function
                    # So instead of sum of squares we may want to explore sum of absolute values
                    scale = hdr['CD2_2']
                    rotation = hdr['CD1_2']
                    offset = 0.0
                    p0 = (scale, rotation, offset, offset)
                    p1 = optimize.least_squares(self._errfunc, p0, loss='soft_l1', args=(xcat[mask] - hdr['CRPIX1'], ycat[mask] - hdr['CRPIX2'], refxi[idx][mask], refeta[idx][mask]))
                    r, s, _, _ = p1.x

                # ... update header with results
                hdr['CD1_1']=-r
                hdr['CD2_2']=r
                hdr['CD1_2']=s
                hdr['CD2_1']=s

                # Match again to remove offset and update CRVAL
                w = WCS(hdr)
                ra, dec = w.wcs_pix2world(xcat,ycat,1)
        
                idx, d2d = self._xmatch(ra, dec, refra, refdec)
                rad = np.median(d2d)+1*np.std(d2d)
                mask = d2d<rad
                offset_ra =  np.mean((ra-refra[idx])[mask])
                offset_dec = np.mean((dec-refdec[idx])[mask])
                hdr['CRVAL1'] -= offset_ra
                hdr['CRVAL2'] -= offset_dec
                
                # We enter here only if we want to fit the PV coefficients
                # By default (hardcoded) we fit a 3-degree polynomial (22 coefficients)
                # It is solved using leastsq optimization and we need a good number of
                # stars to make it work
                if fitpv:
                    # Check for optimization of PVs
                    pv = np.zeros(22).reshape(2,11)
                    for k in range(11):
                        if 'PV1_{}'.format(k) in hdr: pv[0][k] = hdr['PV1_{}'.format(k)]
                        if 'PV2_{}'.format(k) in hdr: pv[1][k] = hdr['PV2_{}'.format(k)]
                    pv = pv.flatten()
                
                    # Run least squares optimization
                    # Need to look again at the docs for better configuration
                    p1 = optimize.least_squares(self._tpv, pv,
                                                            args=(xcat[mask], ycat[mask], hdr, refra[idx][mask], refdec[idx][mask]))

                    # Write to header
                    # TODO: Only write if success
                    pv = p1.x.reshape(2,11)
                    for k in range(11):
                        hdr['PV1_{}'.format(k)] = pv[0][k]
                        hdr['PV2_{}'.format(k)] = pv[1][k]
                
            hdr['NUMBRMS'] = sum(mask)
            hdr['STDCRMS'] = np.std(d2d[mask])
        
            logger.debug('%s %s %s %s', i, img[i].header['CCDID'],np.mean(d2d[mask]), np.std(d2d[mask]))
        
            img.flush()

        img.close()

    def update_model(self, config='wcsfit.conf'):
        conf = ConfigObj(os.path.join(os.path.dirname(__file__), config))

        # Write backup
        backup = config+'.'+datetime.now().strftime('%Y%m%d')
        for i in range(100):
            backup = backup+'.{}'.format(i)
            if not os.access(backup, os.F_OK):
               conf.write(open(backup), 'w'))
               break

        fh = fits.open(self.image_name)

        for i in range(len(fh)-1):
            pvs={}
            for k in range(11):
                pvs['PV1_{}'.format(k)] = fh[i+1].header['PV1_{}'.format(k)]
                pvs['PV2_{}'.format(k)] = fh[i+1].header['PV2_{}'.format(k)]
        
            conf['CCD{}'.format(fh[i+1].header['CCDID'].strip())] = pvs

        conf.write()
        
    def __enter__(self):
        return self
        
    def __exit__(self, type, value, traceback):
        pass
    
def print_summary(input):
    """
    Print a summary of results from astrometric fit.
    """
    fh = fits.open(input)
    for i in range(1, len(fh)):
        logger.info('%s[%d] %s %d %f' % (input, i, fh[i].header.get('CCDID'), fh[i].header.get('NUMBRMS', 0), fh[i].header.get('STDCRMS', -1)))
    fh.close()
    
if __name__ == '__main__':
    # Parse command line arguments
    parser = argparse.ArgumentParser(description='Perform astrometric calibration.')
    parser.add_argument('--copy', action='store_true', help='copy input file before modification')
    parser.add_argument('--nocat', action='store_true', help='skip catalogue generation')
    parser.add_argument('--weight', default='noconf', help='weight map')
    parser.add_argument('--debug', action='store_true', help='set logger to debug')
    parser.add_argument('--mode', default='pipeline', help='running mode: pipeline|calibration')
    parser.add_argument('image', help='FITS image')
    parser.add_argument('refcat', help='Reference catalogue')
    args = parser.parse_args()
    
    if args.debug:
        logger.setLevel(logging.DEBUG)

    if args.copy:
        shutil.copy(args.image, 'w%s' % args.image)
        image_name = 'w%s' % args.image
    else:
        image_name = args.image
        
    if check_exe_in_path() == ERROR:
        sys.exit(1)

    # Check number of extensions and merge quadrants into ccd image if necessary
    n_extensions = get_number_of_extensions(image_name)
    if n_extensions in (4,144): # Quadrants
        merge_quadrants(image_name)   
        image_name = image_name.replace('.fit', '_ccd.fit')
    elif n_extensions in (1, 36):
        pass
    else:
        logger.error('fits file does not contain correct number of extensions ({})'.format(n_extensions))
        sys.exit(1)
    
    # Deal with the weight map if needed
    if args.weight.find('noconf')==-1:
        weight_to_conf(image_name, args.weight)
        
    # Fit astrometry
    with CCDImage(image_name) as img:
        img.fit_astrometry(args.refcat, imcore=not args.nocat, mode=args.mode)
        
    # Primt summary
    print_summary(image_name)
    
